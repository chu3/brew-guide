---
description: 
globs: 
alwaysApply: false
---
# 国际化（i18n）实现规范

## 1. 项目结构

```
├── locales/                # 翻译文件根目录
│   ├── en/                # 英文翻译
│   │   └── common.json    # 通用翻译文件
│   └── zh/                # 中文翻译
│       └── common.json    # 通用翻译文件
├── providers/
│   └── TranslationsProvider.tsx  # 翻译上下文提供者
```

## 2. 翻译文件格式

### 2.1 文件组织
- 使用 JSON 格式
- 按功能模块划分命名空间
- 保持所有语言版本的键名结构完全一致

### 2.2 命名空间规范
```json
{
  "nav": {                    // 导航相关
    "title": "手冲咖啡",
    "main": {                 // 主导航
      "brewing": "冲煮",
      "beans": "咖啡豆",
      "notes": "笔记"
    },
    "steps": {                // 步骤导航
      "beans": "咖啡豆",
      "equipment": "器具",
      "method": "方案",
      "pour": "注水",
      "record": "记录"
    }
  },
  "settings": {               // 设置相关
    "title": "设置",
    "display": {
      "title": "显示",
      "language": "语言"
    }
  }
}
```

### 2.3 键名规范
- 使用小驼峰命名法
- 使用层级结构提高可维护性
- 避免过深的嵌套（最多3层）
- 使用语义化的键名

## 3. 组件使用规范

### 3.1 在客户端组件中使用
```typescript
'use client'
import { useTranslations } from 'next-intl'

export function MyComponent() {
    // 指定命名空间
    const t = useTranslations('nav')
    
    return (
        <div>
            <h1>{t('title')}</h1>
            <button>{t('main.brewing')}</button>
        </div>
    )
}
```

### 3.2 动态值
```typescript
// 在翻译文件中
{
  "greeting": "你好，{name}",
  "count": "共有 {count} 个项目"
}

// 在组件中使用
t('greeting', { name: userName })
t('count', { count: items.length })
```

## 4. 语言切换机制

### 4.1 语言设置存储
```typescript
// 保存在 localStorage 中的格式
interface SettingsOptions {
    // ... 其他设置
    language: 'zh' | 'en'
}
```

### 4.2 语言切换流程
1. 用户在设置中选择语言
2. 保存到 localStorage
3. 触发自定义事件通知变化
4. TranslationsProvider 响应变化并更新

### 4.3 事件通知机制
```typescript
// 触发语言变化事件
export function notifyLanguageChange() {
    const event = new CustomEvent('languageChange')
    window.dispatchEvent(event)
}

// 在设置中使用
if (key === 'language') {
    notifyLanguageChange()
}
```

## 5. 最佳实践

### 5.1 文本管理
- 所有用户可见的文本都应该使用翻译系统
- 避免在代码中硬编码文本
- 为复杂的文本提供上下文注释

### 5.2 性能优化
- 按需加载翻译文件
- 避免频繁切换语言
- 缓存已加载的翻译

### 5.3 错误处理
- 总是提供默认语言（中文）作为后备
- 处理翻译缺失的情况
- 在开发环境提供翻译缺失警告

### 5.4 多语言 SEO
- 确保页面的 lang 属性正确设置
- 提供适当的元数据
- 考虑搜索引擎爬虫的可访问性

## 6. 调试和测试

### 6.1 开发工具
- 使用 VSCode 的 i18n Ally 插件
- 启用翻译缺失警告
- 使用类型检查确保翻译键的正确性

### 6.2 测试策略
- 确保所有语言版本的完整性
- 测试动态值的插值
- 验证语言切换的正确性
- 检查默认语言回退机制
